// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`404 page should render as expected 1`] = `
<PageNotFound
  dispatch={[Function]}
  login={
    Object {
      "errorMessage": false,
      "pending": false,
      "token": false,
      "userAuthenticated": false,
    }
  }
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "notify": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
      "unsubscribe": null,
    }
  }
/>
`;

exports[`Form should render as expected 1`] = `
<ReduxForm
  Login={[Function]}
  login={
    Object {
      "errorMessage": false,
      "pending": false,
      "token": false,
      "userAuthenticated": false,
    }
  }
  onSubmit={[Function]}
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "notify": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
      "unsubscribe": null,
    }
  }
/>
`;

exports[`Form should render as expected 2`] = `
<ReduxForm
  Login={[Function]}
  login={
    Object {
      "errorMessage": false,
      "pending": false,
      "token": false,
      "userAuthenticated": false,
    }
  }
  onSubmit={[Function]}
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "notify": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
      "unsubscribe": null,
    }
  }
/>
`;

exports[`Header should render as expected 1`] = `
<Header
  login={
    Object {
      "errorMessage": false,
      "pending": false,
      "token": false,
      "userAuthenticated": false,
    }
  }
  logout={[Function]}
  servers={
    Object {
      "errorMessage": false,
      "pending": false,
      "servers": Array [],
    }
  }
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "notify": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
      "unsubscribe": null,
    }
  }
/>
`;

exports[`Loading page should render as expected 1`] = `
<div
  className="page"
>
  <div
    className="container"
  >
    <div
      className="spinner"
    >
      <div
        className="bounce1"
      />
      <div
        className="bounce2"
      />
      <div
        className="bounce3"
      />
    </div>
  </div>
</div>
`;

exports[`Login page should render as expected 1`] = `
<div
  className="loginPage"
>
  <div
    className="container"
  >
    <img
      alt="Testio logo"
      className="logo"
      src="logo-white.png"
    />
    <Connect(ReduxForm) />
  </div>
</div>
`;

exports[`Server list should render as expected 1`] = `
<ServersPage
  fetchServers={[Function]}
  login={
    Object {
      "errorMessage": false,
      "pending": false,
      "token": false,
      "userAuthenticated": false,
    }
  }
  servers={
    Object {
      "errorMessage": false,
      "pending": false,
      "servers": Array [],
    }
  }
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "notify": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
      "unsubscribe": null,
    }
  }
/>
`;
